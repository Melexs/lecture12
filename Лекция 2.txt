1 Системы контроля версий. Мотивация
При работе над крупным проектом часто случается:
● Несколько версий одного и того же кода:
● Под разные платформы;
● При адаптации продукта под разных заказчиков;
● Несколько программистов правят один и тот же код одновременно;
● Хотим знать кто и зачем сделал то или иное изменение в коде (кто
виноват?);
● Хотим управлять изменениями (соединять работу нескольких
программистов или разных версий кода);
● Хотим структурировать код по времени (отслеживать изменения),
желательно в графическом виде;
● Необходимо автоматизировать какую-то работу:
● Перед созданием новой версии продукта — запустить тесты;
● Перед загрузкой кода от программиста в общий доступ — проверить
соответствие стандартам кодирования, запустить тесты.
● Ситуация — вы работаете над версией 2.0 вашей «супер-системы»,
заказчик пока что использует 1.0. Версия 2.0 еще совсем сырая (не
компилируется). Заказчик находит критическую ошибку в версии 1.0.

2 Системы контроля версий. История
Все это можно сделать вручную — версии хранить в разных каталогах,
код друг другу пересылать в архивах, резервные копии на сервере, а
при нарушении стандарта кодирования лишать премии.

3 Системы контроля версий.
Распределенные и централизованные
Распределенные системы позволяют лучше масштабировать процесс
разработки. 

4 Системы контроля версий. Git. Первые шаги
Установка:
● Linux: sudo apt-get install git
● OS X: brew install git
● Windows: https://git-scm.com/downloads
Настройка (.gitconfig):
● $ git config --global user.name "Vladimir Vasilev"
● $ git config --global user.email vsvasilev@sfu-kras.ru
Дальше можно работать через терминал, клиенты или даже встроить
поддержку в IDE — например, Git Source Control Provider (Visual
Studio).

13.1 Удаление файлов из git-репозитория. Мотивация
Лишние файлы:
1. Занимают место — ограничения в Bitbucket -2Гб, GitHub - 1 Гб).
2. Затрудняют восприятие проекта.
3. Уменьшают скорость работы.
Решить проблему можно так:
● Использовать .gitignore;
● Создать новый репозиторий (без мусора);
● Использовать специальные инструменты:
● Git-filter-branch;
● BFG Repo-Cleaner


2 Удаление файлов из git-репозитория.
Работа с git-filter-branch
1. Клонировать репозиторий:
 git clone https://bitbucket.org/rrrfer-admin/test_git_filter
 cd test_git_filter
2. Выполнить команду по удалению ненужных файлов:
 git filter-branch --tree-filter 'rm -f images/*.jpg' HEAD
 git filter-branch --tree-filter 'rm -rf folder1’ HEAD
3. Выполнить команду по очистке от мусора:
 git reflog expire --expire=now --all && git gc --prune=now --aggressive
4. Выполнить команду по обновлению историй веток и тегов:
 git push origin --force --all
 git push origin --force –tags
5. Сохранить изменения:
 git push

14 Работа с чужим репозиторием
Цель — склонировать чужой репозиторий, работать с ним как со своим (ведь
Push в чужой репозиторий запрещен).
Если хотите помочь чужому проекту — правильнее использовать Pull Request.
В bitbucket есть встроенный механизм импорта (при создании репозитория).
В github есть механизм fork, который помимо прочего сохранит информацию об
ответвлении.
«Особые механизмы» не позволяют переносить репозиторий. А что если вы
развернули его локально?